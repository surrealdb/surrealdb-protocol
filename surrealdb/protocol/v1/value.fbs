
namespace surrealdb.protocol.v1;

table Decimal { value: string (id: 0); }
table Bytes { value:[ubyte] (id: 0); }

table Duration {
    seconds: uint64 (id: 0);
    nanos: uint32 (id: 1);
}

table Timestamp {
    seconds: int64 (id: 0);
    nanos: uint32 (id: 1);
}

table Uuid {
    bytes: [ubyte] (id: 0);
}

table NoneValue {}
table NullValue {}
table BoolValue { value: bool (id: 0); }
table Int64Value { value: int64 (id: 0); }
table UInt64Value { value: uint64 (id: 0); }
table Float64Value { value: double (id: 0); }
table StringValue { value: string (id: 0); }

// Geometry types
table Point {
    x: double (id: 0);
    y: double (id: 1);
}

table LineString {
    points:[Point] (id: 0);
}

table Polygon {
    exterior: LineString (id: 0);
    interiors: [LineString] (id: 1);
}

table MultiPoint {
    points: [Point] (id: 0);
}

table MultiLineString {
    lines: [LineString] (id: 0);
}

table MultiPolygon {
    polygons: [Polygon] (id: 0);
}

table GeometryCollection {
    geometries: [Geometry] (id: 0);
}

union GeometryType {
    Point (id: 1),
    LineString (id: 2),
    Polygon (id: 3),
    MultiPoint (id: 4),
    MultiLineString (id: 5),
    MultiPolygon (id: 6),
    Collection: GeometryCollection (id: 7),
}

table Geometry {
    geometry: GeometryType (id: 1);
}

table RecordId {
    table: string (id: 0);
    id: RecordIdKey (id: 1);
}

// File type
table File {
    bucket: string (id: 0);
    key: string (id: 1);
}

// Collections
table Array {
    values:[Value] (id: 0);
}

table KeyValue {
    key: string (id: 0);
    value: Value (id: 1);
}

table Object {
    items:[KeyValue] (id: 0);
}

union ValueBound {
    Inclusive: Value (id: 1),
    Exclusive: Value (id: 2),
    Unbounded: NullValue (id: 3),
}

table Range {
    start: ValueBound (id: 1);
    end: ValueBound (id: 3);
}

// Main Value union
union ValueType {
    None: NoneValue (id: 1),
    Null: NullValue (id: 2),
    Bool: BoolValue (id: 3),
    Int64: Int64Value (id: 4),
    UInt64: UInt64Value (id: 5),
    Float64: Float64Value (id: 6),
    String: StringValue (id: 7),
    Bytes: surrealdb.protocol.v1.Bytes (id: 8),
    Decimal: surrealdb.protocol.v1.Decimal (id: 9),
    Duration: surrealdb.protocol.v1.Duration (id: 10),
    Datetime: surrealdb.protocol.v1.Timestamp (id: 11),
    Uuid: surrealdb.protocol.v1.Uuid (id: 12),
    Array (id: 13),
    Object (id: 14),
    Geometry (id: 15),
    RecordId (id: 16),
    File (id: 17),
    Range (id: 18),
}

table Value {
    value: ValueType (id: 1);
}


union RecordIdKeyBound {
    Inclusive: RecordIdKey (id: 1),
    Exclusive: RecordIdKey (id: 2),
    Unbounded: NullValue (id: 3),
}

table RecordIdKeyRange {
    start: RecordIdKeyBound (id: 1);
    end: RecordIdKeyBound (id: 3);
}

// ID types
union RecordIdKeyType {
    Int64: Int64Value (id: 1),
    String: StringValue (id: 2),
    Uuid: surrealdb.protocol.v1.Uuid (id: 3),
    Array (id: 4),
    Range: RecordIdKeyRange (id: 5),
}

table RecordIdKey {
    id: RecordIdKeyType (id: 1);
}

// Kind system tables
table AnyKind {}
table NullKind {}
table BoolKind {}
table BytesKind {}
table DatetimeKind {}
table DecimalKind {}
table DurationKind {}
table FloatKind {}
table IntKind {}
table NumberKind {}
table ObjectKind {}
table PointKind {}
table StringKind {}
table UuidKind {}
table RegexKind {}
table RangeKind {}

table TableName { 
    name: string (id: 0); 
}

table RecordKind {
    tables: [TableName] (id: 0);
}

table GeometryKind {
    types: [string] (id: 0);
}

table FileKind {
    buckets: [string] (id: 0);
}


table OptionKind {
    inner: Kind (id: 0);
}

table EitherKind {
    kinds: [Kind] (id: 0);
}

table SetKind {
    inner: Kind (id: 0);
    size: UInt64Value (id: 1);
}

table ArrayKind {
    inner: Kind (id: 0);
    size: UInt64Value (id: 1);
}

table FunctionKind {
    args: [Kind] (id: 0);
    return_type: Kind (id: 1);
}


// Literal types
table LiteralArray {
    kinds: [Kind] (id: 0);
}

table ObjectField {
    key: string (id: 0);
    kind: Kind (id: 1);
}

table LiteralObject {
    fields: [ObjectField] (id: 0);
}

table LiteralDiscriminatedObject {
    discriminant_key: string (id: 0);
    variants: [LiteralObject] (id: 1);
}

union LiteralType {
    String: StringValue (id: 1),
    Int64: Int64Value (id: 2),
    UInt64: UInt64Value (id: 3),
    Float64: Float64Value (id: 4),
    Decimal: surrealdb.protocol.v1.Decimal (id: 5),
    Duration: surrealdb.protocol.v1.Duration (id: 6),
    Bool: BoolValue (id: 7),
    Array: LiteralArray (id: 8),
    Object: LiteralObject (id: 9),
    DiscriminatedObject: LiteralDiscriminatedObject (id: 10),
}

table LiteralKind {
    literal: LiteralType (id: 1);
}

// Main Kind union
union KindType {
    Any: AnyKind (id: 1),
    Null: NullKind (id: 2),
    Bool: BoolKind (id: 3),
    Bytes: BytesKind (id: 4),
    Datetime: DatetimeKind (id: 5),
    Decimal: DecimalKind (id: 6),
    Duration: DurationKind (id: 7),
    Float: FloatKind (id: 8),
    Int: IntKind (id: 9),
    Number: NumberKind (id: 10),
    Object: ObjectKind (id: 11),
    Point: PointKind (id: 12),
    String: StringKind (id: 13),
    Uuid: UuidKind (id: 14),
    Regex: RegexKind (id: 15),
    Record: RecordKind (id: 16),
    Geometry: GeometryKind (id: 17),
    Option: OptionKind (id: 18),
    Either: EitherKind (id: 19),
    Set: SetKind (id: 20),
    Array: ArrayKind (id: 21),
    Function: FunctionKind (id: 22),
    Range: RangeKind (id: 23),
    Literal: LiteralKind (id: 24),
    File: FileKind (id: 25),
}

table Kind {
    kind: KindType (id: 1);
}
