// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SetExprOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SetExpr<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SetExpr<'a> {
  type Inner = SetExpr<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SetExpr<'a> {
  pub const VT_IDIOM: flatbuffers::VOffsetT = 4;
  pub const VT_OPERATOR: flatbuffers::VOffsetT = 6;
  pub const VT_VALUE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SetExpr { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SetExprArgs<'args>
  ) -> flatbuffers::WIPOffset<SetExpr<'bldr>> {
    let mut builder = SetExprBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.idiom { builder.add_idiom(x); }
    builder.add_operator(args.operator);
    builder.finish()
  }


  #[inline]
  pub fn idiom(&self) -> Option<Idiom<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Idiom>>(SetExpr::VT_IDIOM, None)}
  }
  #[inline]
  pub fn operator(&self) -> Operator {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Operator>(SetExpr::VT_OPERATOR, Some(Operator::Neg)).unwrap()}
  }
  #[inline]
  pub fn value(&self) -> Option<Value<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Value>>(SetExpr::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for SetExpr<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Idiom>>("idiom", Self::VT_IDIOM, false)?
     .visit_field::<Operator>("operator", Self::VT_OPERATOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Value>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct SetExprArgs<'a> {
    pub idiom: Option<flatbuffers::WIPOffset<Idiom<'a>>>,
    pub operator: Operator,
    pub value: Option<flatbuffers::WIPOffset<Value<'a>>>,
}
impl<'a> Default for SetExprArgs<'a> {
  #[inline]
  fn default() -> Self {
    SetExprArgs {
      idiom: None,
      operator: Operator::Neg,
      value: None,
    }
  }
}

pub struct SetExprBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SetExprBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idiom(&mut self, idiom: flatbuffers::WIPOffset<Idiom<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Idiom>>(SetExpr::VT_IDIOM, idiom);
  }
  #[inline]
  pub fn add_operator(&mut self, operator: Operator) {
    self.fbb_.push_slot::<Operator>(SetExpr::VT_OPERATOR, operator, Operator::Neg);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<Value<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Value>>(SetExpr::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SetExprBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SetExprBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SetExpr<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SetExpr<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SetExpr");
      ds.field("idiom", &self.idiom());
      ds.field("operator", &self.operator());
      ds.field("value", &self.value());
      ds.finish()
  }
}
