// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RangeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Range<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Range<'a> {
  type Inner = Range<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Range<'a> {
  pub const VT_START_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_START: flatbuffers::VOffsetT = 6;
  pub const VT_END_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_END: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Range { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RangeArgs
  ) -> flatbuffers::WIPOffset<Range<'bldr>> {
    let mut builder = RangeBuilder::new(_fbb);
    if let Some(x) = args.end { builder.add_end(x); }
    if let Some(x) = args.start { builder.add_start(x); }
    builder.add_end_type(args.end_type);
    builder.add_start_type(args.start_type);
    builder.finish()
  }


  #[inline]
  pub fn start_type(&self) -> ValueBound {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ValueBound>(Range::VT_START_TYPE, Some(ValueBound::NONE)).unwrap()}
  }
  #[inline]
  pub fn start(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Range::VT_START, None)}
  }
  #[inline]
  pub fn end_type(&self) -> ValueBound {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ValueBound>(Range::VT_END_TYPE, Some(ValueBound::NONE)).unwrap()}
  }
  #[inline]
  pub fn end(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Range::VT_END, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn start_as_inclusive(&self) -> Option<Value<'a>> {
    if self.start_type() == ValueBound::Inclusive {
      self.start().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn start_as_exclusive(&self) -> Option<Value<'a>> {
    if self.start_type() == ValueBound::Exclusive {
      self.start().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn start_as_unbounded(&self) -> Option<NullValue<'a>> {
    if self.start_type() == ValueBound::Unbounded {
      self.start().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { NullValue::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn end_as_inclusive(&self) -> Option<Value<'a>> {
    if self.end_type() == ValueBound::Inclusive {
      self.end().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn end_as_exclusive(&self) -> Option<Value<'a>> {
    if self.end_type() == ValueBound::Exclusive {
      self.end().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn end_as_unbounded(&self) -> Option<NullValue<'a>> {
    if self.end_type() == ValueBound::Unbounded {
      self.end().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { NullValue::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Range<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<ValueBound, _>("start_type", Self::VT_START_TYPE, "start", Self::VT_START, false, |key, v, pos| {
        match key {
          ValueBound::Inclusive => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("ValueBound::Inclusive", pos),
          ValueBound::Exclusive => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("ValueBound::Exclusive", pos),
          ValueBound::Unbounded => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NullValue>>("ValueBound::Unbounded", pos),
          _ => Ok(()),
        }
     })?
     .visit_union::<ValueBound, _>("end_type", Self::VT_END_TYPE, "end", Self::VT_END, false, |key, v, pos| {
        match key {
          ValueBound::Inclusive => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("ValueBound::Inclusive", pos),
          ValueBound::Exclusive => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("ValueBound::Exclusive", pos),
          ValueBound::Unbounded => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NullValue>>("ValueBound::Unbounded", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct RangeArgs {
    pub start_type: ValueBound,
    pub start: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub end_type: ValueBound,
    pub end: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for RangeArgs {
  #[inline]
  fn default() -> Self {
    RangeArgs {
      start_type: ValueBound::NONE,
      start: None,
      end_type: ValueBound::NONE,
      end: None,
    }
  }
}

pub struct RangeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RangeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_start_type(&mut self, start_type: ValueBound) {
    self.fbb_.push_slot::<ValueBound>(Range::VT_START_TYPE, start_type, ValueBound::NONE);
  }
  #[inline]
  pub fn add_start(&mut self, start: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Range::VT_START, start);
  }
  #[inline]
  pub fn add_end_type(&mut self, end_type: ValueBound) {
    self.fbb_.push_slot::<ValueBound>(Range::VT_END_TYPE, end_type, ValueBound::NONE);
  }
  #[inline]
  pub fn add_end(&mut self, end: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Range::VT_END, end);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RangeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RangeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Range<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Range<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Range");
      ds.field("start_type", &self.start_type());
      match self.start_type() {
        ValueBound::Inclusive => {
          if let Some(x) = self.start_as_inclusive() {
            ds.field("start", &x)
          } else {
            ds.field("start", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ValueBound::Exclusive => {
          if let Some(x) = self.start_as_exclusive() {
            ds.field("start", &x)
          } else {
            ds.field("start", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ValueBound::Unbounded => {
          if let Some(x) = self.start_as_unbounded() {
            ds.field("start", &x)
          } else {
            ds.field("start", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("start", &x)
        },
      };
      ds.field("end_type", &self.end_type());
      match self.end_type() {
        ValueBound::Inclusive => {
          if let Some(x) = self.end_as_inclusive() {
            ds.field("end", &x)
          } else {
            ds.field("end", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ValueBound::Exclusive => {
          if let Some(x) = self.end_as_exclusive() {
            ds.field("end", &x)
          } else {
            ds.field("end", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ValueBound::Unbounded => {
          if let Some(x) = self.end_as_unbounded() {
            ds.field("end", &x)
          } else {
            ds.field("end", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("end", &x)
        },
      };
      ds.finish()
  }
}
