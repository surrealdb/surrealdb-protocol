// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_VALUE_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_VALUE_TYPE: u8 = 20;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_VALUE_TYPE: [ValueType; 21] = [
  ValueType::NONE,
  ValueType::Null,
  ValueType::Bool,
  ValueType::Int64,
  ValueType::UInt64,
  ValueType::Float64,
  ValueType::String,
  ValueType::Bytes,
  ValueType::Decimal,
  ValueType::Duration,
  ValueType::Datetime,
  ValueType::Uuid,
  ValueType::Array,
  ValueType::Object,
  ValueType::Geometry,
  ValueType::Table,
  ValueType::RecordId,
  ValueType::StringRecordId,
  ValueType::File,
  ValueType::Range,
  ValueType::Regex,
];

/// A union of all possible value types in SurrealDB.
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ValueType(pub u8);
#[allow(non_upper_case_globals)]
impl ValueType {
  pub const NONE: Self = Self(0);
  pub const Null: Self = Self(1);
  pub const Bool: Self = Self(2);
  pub const Int64: Self = Self(3);
  pub const UInt64: Self = Self(4);
  pub const Float64: Self = Self(5);
  pub const String: Self = Self(6);
  pub const Bytes: Self = Self(7);
  pub const Decimal: Self = Self(8);
  pub const Duration: Self = Self(9);
  pub const Datetime: Self = Self(10);
  pub const Uuid: Self = Self(11);
  pub const Array: Self = Self(12);
  pub const Object: Self = Self(13);
  pub const Geometry: Self = Self(14);
  pub const Table: Self = Self(15);
  /// A fully-qualified record ID.
  pub const RecordId: Self = Self(16);
  /// An unparsed record ID which will be parsed by the server.
  pub const StringRecordId: Self = Self(17);
  pub const File: Self = Self(18);
  pub const Range: Self = Self(19);
  pub const Regex: Self = Self(20);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 20;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Null,
    Self::Bool,
    Self::Int64,
    Self::UInt64,
    Self::Float64,
    Self::String,
    Self::Bytes,
    Self::Decimal,
    Self::Duration,
    Self::Datetime,
    Self::Uuid,
    Self::Array,
    Self::Object,
    Self::Geometry,
    Self::Table,
    Self::RecordId,
    Self::StringRecordId,
    Self::File,
    Self::Range,
    Self::Regex,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Null => Some("Null"),
      Self::Bool => Some("Bool"),
      Self::Int64 => Some("Int64"),
      Self::UInt64 => Some("UInt64"),
      Self::Float64 => Some("Float64"),
      Self::String => Some("String"),
      Self::Bytes => Some("Bytes"),
      Self::Decimal => Some("Decimal"),
      Self::Duration => Some("Duration"),
      Self::Datetime => Some("Datetime"),
      Self::Uuid => Some("Uuid"),
      Self::Array => Some("Array"),
      Self::Object => Some("Object"),
      Self::Geometry => Some("Geometry"),
      Self::Table => Some("Table"),
      Self::RecordId => Some("RecordId"),
      Self::StringRecordId => Some("StringRecordId"),
      Self::File => Some("File"),
      Self::Range => Some("Range"),
      Self::Regex => Some("Regex"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ValueType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ValueType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
    Self(b)
  }
}

impl flatbuffers::Push for ValueType {
    type Output = ValueType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for ValueType {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ValueType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ValueType {}
pub struct ValueTypeUnionTableOffset {}

