// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OPERATOR: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OPERATOR: u8 = 39;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OPERATOR: [Operator; 40] = [
  Operator::Neg,
  Operator::Not,
  Operator::Or,
  Operator::And,
  Operator::Tco,
  Operator::Nco,
  Operator::Add,
  Operator::Sub,
  Operator::Mul,
  Operator::Div,
  Operator::Rem,
  Operator::Pow,
  Operator::Inc,
  Operator::Dec,
  Operator::Ext,
  Operator::Equal,
  Operator::Exact,
  Operator::NotEqual,
  Operator::AllEqual,
  Operator::AnyEqual,
  Operator::Like,
  Operator::NotLike,
  Operator::AllLike,
  Operator::AnyLike,
  Operator::LessThan,
  Operator::LessThanOrEqual,
  Operator::GreaterThan,
  Operator::GreaterThanOrEqual,
  Operator::Contain,
  Operator::NotContain,
  Operator::ContainAll,
  Operator::ContainAny,
  Operator::ContainNone,
  Operator::Inside,
  Operator::NotInside,
  Operator::AllInside,
  Operator::AnyInside,
  Operator::NoneInside,
  Operator::Outside,
  Operator::Intersects,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Operator(pub u8);
#[allow(non_upper_case_globals)]
impl Operator {
  pub const Neg: Self = Self(0);
  pub const Not: Self = Self(1);
  pub const Or: Self = Self(2);
  pub const And: Self = Self(3);
  pub const Tco: Self = Self(4);
  pub const Nco: Self = Self(5);
  pub const Add: Self = Self(6);
  pub const Sub: Self = Self(7);
  pub const Mul: Self = Self(8);
  pub const Div: Self = Self(9);
  pub const Rem: Self = Self(10);
  pub const Pow: Self = Self(11);
  pub const Inc: Self = Self(12);
  pub const Dec: Self = Self(13);
  pub const Ext: Self = Self(14);
  pub const Equal: Self = Self(15);
  pub const Exact: Self = Self(16);
  pub const NotEqual: Self = Self(17);
  pub const AllEqual: Self = Self(18);
  pub const AnyEqual: Self = Self(19);
  pub const Like: Self = Self(20);
  pub const NotLike: Self = Self(21);
  pub const AllLike: Self = Self(22);
  pub const AnyLike: Self = Self(23);
  pub const LessThan: Self = Self(24);
  pub const LessThanOrEqual: Self = Self(25);
  pub const GreaterThan: Self = Self(26);
  pub const GreaterThanOrEqual: Self = Self(27);
  pub const Contain: Self = Self(28);
  pub const NotContain: Self = Self(29);
  pub const ContainAll: Self = Self(30);
  pub const ContainAny: Self = Self(31);
  pub const ContainNone: Self = Self(32);
  pub const Inside: Self = Self(33);
  pub const NotInside: Self = Self(34);
  pub const AllInside: Self = Self(35);
  pub const AnyInside: Self = Self(36);
  pub const NoneInside: Self = Self(37);
  pub const Outside: Self = Self(38);
  pub const Intersects: Self = Self(39);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 39;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Neg,
    Self::Not,
    Self::Or,
    Self::And,
    Self::Tco,
    Self::Nco,
    Self::Add,
    Self::Sub,
    Self::Mul,
    Self::Div,
    Self::Rem,
    Self::Pow,
    Self::Inc,
    Self::Dec,
    Self::Ext,
    Self::Equal,
    Self::Exact,
    Self::NotEqual,
    Self::AllEqual,
    Self::AnyEqual,
    Self::Like,
    Self::NotLike,
    Self::AllLike,
    Self::AnyLike,
    Self::LessThan,
    Self::LessThanOrEqual,
    Self::GreaterThan,
    Self::GreaterThanOrEqual,
    Self::Contain,
    Self::NotContain,
    Self::ContainAll,
    Self::ContainAny,
    Self::ContainNone,
    Self::Inside,
    Self::NotInside,
    Self::AllInside,
    Self::AnyInside,
    Self::NoneInside,
    Self::Outside,
    Self::Intersects,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Neg => Some("Neg"),
      Self::Not => Some("Not"),
      Self::Or => Some("Or"),
      Self::And => Some("And"),
      Self::Tco => Some("Tco"),
      Self::Nco => Some("Nco"),
      Self::Add => Some("Add"),
      Self::Sub => Some("Sub"),
      Self::Mul => Some("Mul"),
      Self::Div => Some("Div"),
      Self::Rem => Some("Rem"),
      Self::Pow => Some("Pow"),
      Self::Inc => Some("Inc"),
      Self::Dec => Some("Dec"),
      Self::Ext => Some("Ext"),
      Self::Equal => Some("Equal"),
      Self::Exact => Some("Exact"),
      Self::NotEqual => Some("NotEqual"),
      Self::AllEqual => Some("AllEqual"),
      Self::AnyEqual => Some("AnyEqual"),
      Self::Like => Some("Like"),
      Self::NotLike => Some("NotLike"),
      Self::AllLike => Some("AllLike"),
      Self::AnyLike => Some("AnyLike"),
      Self::LessThan => Some("LessThan"),
      Self::LessThanOrEqual => Some("LessThanOrEqual"),
      Self::GreaterThan => Some("GreaterThan"),
      Self::GreaterThanOrEqual => Some("GreaterThanOrEqual"),
      Self::Contain => Some("Contain"),
      Self::NotContain => Some("NotContain"),
      Self::ContainAll => Some("ContainAll"),
      Self::ContainAny => Some("ContainAny"),
      Self::ContainNone => Some("ContainNone"),
      Self::Inside => Some("Inside"),
      Self::NotInside => Some("NotInside"),
      Self::AllInside => Some("AllInside"),
      Self::AnyInside => Some("AnyInside"),
      Self::NoneInside => Some("NoneInside"),
      Self::Outside => Some("Outside"),
      Self::Intersects => Some("Intersects"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Operator {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Operator {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Operator {
    type Output = Operator;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Operator {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Operator {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Operator {}
