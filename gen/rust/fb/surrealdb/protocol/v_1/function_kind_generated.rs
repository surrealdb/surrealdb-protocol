// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FunctionKindOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FunctionKind<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FunctionKind<'a> {
  type Inner = FunctionKind<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FunctionKind<'a> {
  pub const VT_ARGS: flatbuffers::VOffsetT = 4;
  pub const VT_RETURN_TYPE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FunctionKind { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FunctionKindArgs<'args>
  ) -> flatbuffers::WIPOffset<FunctionKind<'bldr>> {
    let mut builder = FunctionKindBuilder::new(_fbb);
    if let Some(x) = args.return_type { builder.add_return_type(x); }
    if let Some(x) = args.args { builder.add_args(x); }
    builder.finish()
  }


  #[inline]
  pub fn args(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Kind<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Kind>>>>(FunctionKind::VT_ARGS, None)}
  }
  #[inline]
  pub fn return_type(&self) -> Option<Kind<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Kind>>(FunctionKind::VT_RETURN_TYPE, None)}
  }
}

impl flatbuffers::Verifiable for FunctionKind<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Kind>>>>("args", Self::VT_ARGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Kind>>("return_type", Self::VT_RETURN_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct FunctionKindArgs<'a> {
    pub args: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Kind<'a>>>>>,
    pub return_type: Option<flatbuffers::WIPOffset<Kind<'a>>>,
}
impl<'a> Default for FunctionKindArgs<'a> {
  #[inline]
  fn default() -> Self {
    FunctionKindArgs {
      args: None,
      return_type: None,
    }
  }
}

pub struct FunctionKindBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FunctionKindBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_args(&mut self, args: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Kind<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FunctionKind::VT_ARGS, args);
  }
  #[inline]
  pub fn add_return_type(&mut self, return_type: flatbuffers::WIPOffset<Kind<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Kind>>(FunctionKind::VT_RETURN_TYPE, return_type);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FunctionKindBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FunctionKindBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FunctionKind<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FunctionKind<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FunctionKind");
      ds.field("args", &self.args());
      ds.field("return_type", &self.return_type());
      ds.finish()
  }
}
