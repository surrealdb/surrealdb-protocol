// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GraphSubjectOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GraphSubject<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GraphSubject<'a> {
  type Inner = GraphSubject<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GraphSubject<'a> {
  pub const VT_SUBJECT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_SUBJECT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GraphSubject { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GraphSubjectArgs
  ) -> flatbuffers::WIPOffset<GraphSubject<'bldr>> {
    let mut builder = GraphSubjectBuilder::new(_fbb);
    if let Some(x) = args.subject { builder.add_subject(x); }
    builder.add_subject_type(args.subject_type);
    builder.finish()
  }


  #[inline]
  pub fn subject_type(&self) -> GraphSubjectType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GraphSubjectType>(GraphSubject::VT_SUBJECT_TYPE, Some(GraphSubjectType::NONE)).unwrap()}
  }
  #[inline]
  pub fn subject(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(GraphSubject::VT_SUBJECT, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn subject_as_table(&self) -> Option<Table<'a>> {
    if self.subject_type() == GraphSubjectType::Table {
      self.subject().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Table::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn subject_as_range(&self) -> Option<TableIdRange<'a>> {
    if self.subject_type() == GraphSubjectType::Range {
      self.subject().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TableIdRange::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for GraphSubject<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<GraphSubjectType, _>("subject_type", Self::VT_SUBJECT_TYPE, "subject", Self::VT_SUBJECT, false, |key, v, pos| {
        match key {
          GraphSubjectType::Table => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Table>>("GraphSubjectType::Table", pos),
          GraphSubjectType::Range => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TableIdRange>>("GraphSubjectType::Range", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct GraphSubjectArgs {
    pub subject_type: GraphSubjectType,
    pub subject: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GraphSubjectArgs {
  #[inline]
  fn default() -> Self {
    GraphSubjectArgs {
      subject_type: GraphSubjectType::NONE,
      subject: None,
    }
  }
}

pub struct GraphSubjectBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GraphSubjectBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_subject_type(&mut self, subject_type: GraphSubjectType) {
    self.fbb_.push_slot::<GraphSubjectType>(GraphSubject::VT_SUBJECT_TYPE, subject_type, GraphSubjectType::NONE);
  }
  #[inline]
  pub fn add_subject(&mut self, subject: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GraphSubject::VT_SUBJECT, subject);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GraphSubjectBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GraphSubjectBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GraphSubject<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GraphSubject<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GraphSubject");
      ds.field("subject_type", &self.subject_type());
      match self.subject_type() {
        GraphSubjectType::Table => {
          if let Some(x) = self.subject_as_table() {
            ds.field("subject", &x)
          } else {
            ds.field("subject", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GraphSubjectType::Range => {
          if let Some(x) = self.subject_as_range() {
            ds.field("subject", &x)
          } else {
            ds.field("subject", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("subject", &x)
        },
      };
      ds.finish()
  }
}
