// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Data<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Data<'a> {
  type Inner = Data<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Data<'a> {
  pub const VT_CONTENTS_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_CONTENTS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Data { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataArgs
  ) -> flatbuffers::WIPOffset<Data<'bldr>> {
    let mut builder = DataBuilder::new(_fbb);
    if let Some(x) = args.contents { builder.add_contents(x); }
    builder.add_contents_type(args.contents_type);
    builder.finish()
  }


  #[inline]
  pub fn contents_type(&self) -> DataContents {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataContents>(Data::VT_CONTENTS_TYPE, Some(DataContents::NONE)).unwrap()}
  }
  #[inline]
  pub fn contents(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Data::VT_CONTENTS, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_empty(&self) -> Option<NullValue<'a>> {
    if self.contents_type() == DataContents::Empty {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { NullValue::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_set(&self) -> Option<SetMultiExpr<'a>> {
    if self.contents_type() == DataContents::Set {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { SetMultiExpr::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_unset(&self) -> Option<UnsetMultiExpr<'a>> {
    if self.contents_type() == DataContents::Unset {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { UnsetMultiExpr::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_patch(&self) -> Option<Value<'a>> {
    if self.contents_type() == DataContents::Patch {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_merge(&self) -> Option<Value<'a>> {
    if self.contents_type() == DataContents::Merge {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_replace(&self) -> Option<Value<'a>> {
    if self.contents_type() == DataContents::Replace {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_content(&self) -> Option<Value<'a>> {
    if self.contents_type() == DataContents::Content {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_value(&self) -> Option<Value<'a>> {
    if self.contents_type() == DataContents::Value {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_values(&self) -> Option<ValuesMultiExpr<'a>> {
    if self.contents_type() == DataContents::Values {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ValuesMultiExpr::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn contents_as_update(&self) -> Option<SetMultiExpr<'a>> {
    if self.contents_type() == DataContents::Update {
      self.contents().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { SetMultiExpr::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Data<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<DataContents, _>("contents_type", Self::VT_CONTENTS_TYPE, "contents", Self::VT_CONTENTS, false, |key, v, pos| {
        match key {
          DataContents::Empty => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NullValue>>("DataContents::Empty", pos),
          DataContents::Set => v.verify_union_variant::<flatbuffers::ForwardsUOffset<SetMultiExpr>>("DataContents::Set", pos),
          DataContents::Unset => v.verify_union_variant::<flatbuffers::ForwardsUOffset<UnsetMultiExpr>>("DataContents::Unset", pos),
          DataContents::Patch => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("DataContents::Patch", pos),
          DataContents::Merge => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("DataContents::Merge", pos),
          DataContents::Replace => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("DataContents::Replace", pos),
          DataContents::Content => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("DataContents::Content", pos),
          DataContents::Value => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Value>>("DataContents::Value", pos),
          DataContents::Values => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ValuesMultiExpr>>("DataContents::Values", pos),
          DataContents::Update => v.verify_union_variant::<flatbuffers::ForwardsUOffset<SetMultiExpr>>("DataContents::Update", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct DataArgs {
    pub contents_type: DataContents,
    pub contents: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for DataArgs {
  #[inline]
  fn default() -> Self {
    DataArgs {
      contents_type: DataContents::NONE,
      contents: None,
    }
  }
}

pub struct DataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_contents_type(&mut self, contents_type: DataContents) {
    self.fbb_.push_slot::<DataContents>(Data::VT_CONTENTS_TYPE, contents_type, DataContents::NONE);
  }
  #[inline]
  pub fn add_contents(&mut self, contents: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Data::VT_CONTENTS, contents);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Data<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Data<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Data");
      ds.field("contents_type", &self.contents_type());
      match self.contents_type() {
        DataContents::Empty => {
          if let Some(x) = self.contents_as_empty() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Set => {
          if let Some(x) = self.contents_as_set() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Unset => {
          if let Some(x) = self.contents_as_unset() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Patch => {
          if let Some(x) = self.contents_as_patch() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Merge => {
          if let Some(x) = self.contents_as_merge() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Replace => {
          if let Some(x) = self.contents_as_replace() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Content => {
          if let Some(x) = self.contents_as_content() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Value => {
          if let Some(x) = self.contents_as_value() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Values => {
          if let Some(x) = self.contents_as_values() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        DataContents::Update => {
          if let Some(x) = self.contents_as_update() {
            ds.field("contents", &x)
          } else {
            ds.field("contents", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("contents", &x)
        },
      };
      ds.finish()
  }
}
