// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GeometryOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A Geometry object.
pub struct Geometry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Geometry<'a> {
  type Inner = Geometry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Geometry<'a> {
  pub const VT_GEOMETRY_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_GEOMETRY: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Geometry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GeometryArgs
  ) -> flatbuffers::WIPOffset<Geometry<'bldr>> {
    let mut builder = GeometryBuilder::new(_fbb);
    if let Some(x) = args.geometry { builder.add_geometry(x); }
    builder.add_geometry_type(args.geometry_type);
    builder.finish()
  }


  #[inline]
  pub fn geometry_type(&self) -> GeometryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GeometryType>(Geometry::VT_GEOMETRY_TYPE, Some(GeometryType::NONE)).unwrap()}
  }
  #[inline]
  pub fn geometry(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Geometry::VT_GEOMETRY, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_point(&self) -> Option<Point<'a>> {
    if self.geometry_type() == GeometryType::Point {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Point::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_line_string(&self) -> Option<LineString<'a>> {
    if self.geometry_type() == GeometryType::LineString {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { LineString::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_polygon(&self) -> Option<Polygon<'a>> {
    if self.geometry_type() == GeometryType::Polygon {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Polygon::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_multi_point(&self) -> Option<MultiPoint<'a>> {
    if self.geometry_type() == GeometryType::MultiPoint {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { MultiPoint::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_multi_line_string(&self) -> Option<MultiLineString<'a>> {
    if self.geometry_type() == GeometryType::MultiLineString {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { MultiLineString::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_multi_polygon(&self) -> Option<MultiPolygon<'a>> {
    if self.geometry_type() == GeometryType::MultiPolygon {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { MultiPolygon::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn geometry_as_collection(&self) -> Option<GeometryCollection<'a>> {
    if self.geometry_type() == GeometryType::Collection {
      self.geometry().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { GeometryCollection::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Geometry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<GeometryType, _>("geometry_type", Self::VT_GEOMETRY_TYPE, "geometry", Self::VT_GEOMETRY, false, |key, v, pos| {
        match key {
          GeometryType::Point => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Point>>("GeometryType::Point", pos),
          GeometryType::LineString => v.verify_union_variant::<flatbuffers::ForwardsUOffset<LineString>>("GeometryType::LineString", pos),
          GeometryType::Polygon => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Polygon>>("GeometryType::Polygon", pos),
          GeometryType::MultiPoint => v.verify_union_variant::<flatbuffers::ForwardsUOffset<MultiPoint>>("GeometryType::MultiPoint", pos),
          GeometryType::MultiLineString => v.verify_union_variant::<flatbuffers::ForwardsUOffset<MultiLineString>>("GeometryType::MultiLineString", pos),
          GeometryType::MultiPolygon => v.verify_union_variant::<flatbuffers::ForwardsUOffset<MultiPolygon>>("GeometryType::MultiPolygon", pos),
          GeometryType::Collection => v.verify_union_variant::<flatbuffers::ForwardsUOffset<GeometryCollection>>("GeometryType::Collection", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct GeometryArgs {
    pub geometry_type: GeometryType,
    pub geometry: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GeometryArgs {
  #[inline]
  fn default() -> Self {
    GeometryArgs {
      geometry_type: GeometryType::NONE,
      geometry: None,
    }
  }
}

pub struct GeometryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GeometryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_geometry_type(&mut self, geometry_type: GeometryType) {
    self.fbb_.push_slot::<GeometryType>(Geometry::VT_GEOMETRY_TYPE, geometry_type, GeometryType::NONE);
  }
  #[inline]
  pub fn add_geometry(&mut self, geometry: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Geometry::VT_GEOMETRY, geometry);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GeometryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GeometryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Geometry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Geometry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Geometry");
      ds.field("geometry_type", &self.geometry_type());
      match self.geometry_type() {
        GeometryType::Point => {
          if let Some(x) = self.geometry_as_point() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GeometryType::LineString => {
          if let Some(x) = self.geometry_as_line_string() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GeometryType::Polygon => {
          if let Some(x) = self.geometry_as_polygon() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GeometryType::MultiPoint => {
          if let Some(x) = self.geometry_as_multi_point() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GeometryType::MultiLineString => {
          if let Some(x) = self.geometry_as_multi_line_string() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GeometryType::MultiPolygon => {
          if let Some(x) = self.geometry_as_multi_polygon() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        GeometryType::Collection => {
          if let Some(x) = self.geometry_as_collection() {
            ds.field("geometry", &x)
          } else {
            ds.field("geometry", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("geometry", &x)
        },
      };
      ds.finish()
  }
}
