// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_KIND_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_KIND_TYPE: u8 = 25;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_KIND_TYPE: [KindType; 26] = [
  KindType::NONE,
  KindType::Any,
  KindType::Null,
  KindType::Bool,
  KindType::Bytes,
  KindType::Datetime,
  KindType::Decimal,
  KindType::Duration,
  KindType::Float,
  KindType::Int,
  KindType::Number,
  KindType::Object,
  KindType::Point,
  KindType::String,
  KindType::Uuid,
  KindType::Regex,
  KindType::Record,
  KindType::Geometry,
  KindType::Option,
  KindType::Either,
  KindType::Set,
  KindType::Array,
  KindType::Function,
  KindType::Range,
  KindType::Literal,
  KindType::File,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct KindType(pub u8);
#[allow(non_upper_case_globals)]
impl KindType {
  pub const NONE: Self = Self(0);
  pub const Any: Self = Self(1);
  pub const Null: Self = Self(2);
  pub const Bool: Self = Self(3);
  pub const Bytes: Self = Self(4);
  pub const Datetime: Self = Self(5);
  pub const Decimal: Self = Self(6);
  pub const Duration: Self = Self(7);
  pub const Float: Self = Self(8);
  pub const Int: Self = Self(9);
  pub const Number: Self = Self(10);
  pub const Object: Self = Self(11);
  pub const Point: Self = Self(12);
  pub const String: Self = Self(13);
  pub const Uuid: Self = Self(14);
  pub const Regex: Self = Self(15);
  pub const Record: Self = Self(16);
  pub const Geometry: Self = Self(17);
  pub const Option: Self = Self(18);
  pub const Either: Self = Self(19);
  pub const Set: Self = Self(20);
  pub const Array: Self = Self(21);
  pub const Function: Self = Self(22);
  pub const Range: Self = Self(23);
  pub const Literal: Self = Self(24);
  pub const File: Self = Self(25);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 25;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Any,
    Self::Null,
    Self::Bool,
    Self::Bytes,
    Self::Datetime,
    Self::Decimal,
    Self::Duration,
    Self::Float,
    Self::Int,
    Self::Number,
    Self::Object,
    Self::Point,
    Self::String,
    Self::Uuid,
    Self::Regex,
    Self::Record,
    Self::Geometry,
    Self::Option,
    Self::Either,
    Self::Set,
    Self::Array,
    Self::Function,
    Self::Range,
    Self::Literal,
    Self::File,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Any => Some("Any"),
      Self::Null => Some("Null"),
      Self::Bool => Some("Bool"),
      Self::Bytes => Some("Bytes"),
      Self::Datetime => Some("Datetime"),
      Self::Decimal => Some("Decimal"),
      Self::Duration => Some("Duration"),
      Self::Float => Some("Float"),
      Self::Int => Some("Int"),
      Self::Number => Some("Number"),
      Self::Object => Some("Object"),
      Self::Point => Some("Point"),
      Self::String => Some("String"),
      Self::Uuid => Some("Uuid"),
      Self::Regex => Some("Regex"),
      Self::Record => Some("Record"),
      Self::Geometry => Some("Geometry"),
      Self::Option => Some("Option"),
      Self::Either => Some("Either"),
      Self::Set => Some("Set"),
      Self::Array => Some("Array"),
      Self::Function => Some("Function"),
      Self::Range => Some("Range"),
      Self::Literal => Some("Literal"),
      Self::File => Some("File"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for KindType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for KindType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for KindType {
    type Output = KindType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for KindType {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for KindType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for KindType {}
pub struct KindTypeUnionTableOffset {}

