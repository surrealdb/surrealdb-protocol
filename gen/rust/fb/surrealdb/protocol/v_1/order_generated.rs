// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum OrderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Order<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Order<'a> {
  type Inner = Order<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Order<'a> {
  pub const VT_VALUE: flatbuffers::VOffsetT = 4;
  pub const VT_COLLATE: flatbuffers::VOffsetT = 6;
  pub const VT_NUMERIC: flatbuffers::VOffsetT = 8;
  pub const VT_ASCENDING: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Order { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrderArgs<'args>
  ) -> flatbuffers::WIPOffset<Order<'bldr>> {
    let mut builder = OrderBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    builder.add_ascending(args.ascending);
    builder.add_numeric(args.numeric);
    builder.add_collate(args.collate);
    builder.finish()
  }


  #[inline]
  pub fn value(&self) -> Option<Idiom<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Idiom>>(Order::VT_VALUE, None)}
  }
  #[inline]
  pub fn collate(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Order::VT_COLLATE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn numeric(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Order::VT_NUMERIC, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ascending(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Order::VT_ASCENDING, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Order<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Idiom>>("value", Self::VT_VALUE, false)?
     .visit_field::<bool>("collate", Self::VT_COLLATE, false)?
     .visit_field::<bool>("numeric", Self::VT_NUMERIC, false)?
     .visit_field::<bool>("ascending", Self::VT_ASCENDING, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderArgs<'a> {
    pub value: Option<flatbuffers::WIPOffset<Idiom<'a>>>,
    pub collate: bool,
    pub numeric: bool,
    pub ascending: bool,
}
impl<'a> Default for OrderArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrderArgs {
      value: None,
      collate: false,
      numeric: false,
      ascending: false,
    }
  }
}

pub struct OrderBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrderBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<Idiom<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Idiom>>(Order::VT_VALUE, value);
  }
  #[inline]
  pub fn add_collate(&mut self, collate: bool) {
    self.fbb_.push_slot::<bool>(Order::VT_COLLATE, collate, false);
  }
  #[inline]
  pub fn add_numeric(&mut self, numeric: bool) {
    self.fbb_.push_slot::<bool>(Order::VT_NUMERIC, numeric, false);
  }
  #[inline]
  pub fn add_ascending(&mut self, ascending: bool) {
    self.fbb_.push_slot::<bool>(Order::VT_ASCENDING, ascending, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrderBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Order<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Order<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Order");
      ds.field("value", &self.value());
      ds.field("collate", &self.collate());
      ds.field("numeric", &self.numeric());
      ds.field("ascending", &self.ascending());
      ds.finish()
  }
}
