// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PolygonOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A bounded two-dimensional area.
///
/// A Polygonâ€™s outer boundary (exterior ring) is represented by a LineString. It may contain zero or more holes (interior rings), also represented by LineStrings.
pub struct Polygon<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Polygon<'a> {
  type Inner = Polygon<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Polygon<'a> {
  pub const VT_EXTERIOR: flatbuffers::VOffsetT = 4;
  pub const VT_INTERIORS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Polygon { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PolygonArgs<'args>
  ) -> flatbuffers::WIPOffset<Polygon<'bldr>> {
    let mut builder = PolygonBuilder::new(_fbb);
    if let Some(x) = args.interiors { builder.add_interiors(x); }
    if let Some(x) = args.exterior { builder.add_exterior(x); }
    builder.finish()
  }


  #[inline]
  pub fn exterior(&self) -> Option<LineString<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<LineString>>(Polygon::VT_EXTERIOR, None)}
  }
  #[inline]
  pub fn interiors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LineString<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LineString>>>>(Polygon::VT_INTERIORS, None)}
  }
}

impl flatbuffers::Verifiable for Polygon<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<LineString>>("exterior", Self::VT_EXTERIOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LineString>>>>("interiors", Self::VT_INTERIORS, false)?
     .finish();
    Ok(())
  }
}
pub struct PolygonArgs<'a> {
    pub exterior: Option<flatbuffers::WIPOffset<LineString<'a>>>,
    pub interiors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LineString<'a>>>>>,
}
impl<'a> Default for PolygonArgs<'a> {
  #[inline]
  fn default() -> Self {
    PolygonArgs {
      exterior: None,
      interiors: None,
    }
  }
}

pub struct PolygonBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PolygonBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_exterior(&mut self, exterior: flatbuffers::WIPOffset<LineString<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<LineString>>(Polygon::VT_EXTERIOR, exterior);
  }
  #[inline]
  pub fn add_interiors(&mut self, interiors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<LineString<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Polygon::VT_INTERIORS, interiors);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PolygonBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PolygonBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Polygon<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Polygon<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Polygon");
      ds.field("exterior", &self.exterior());
      ds.field("interiors", &self.interiors());
      ds.finish()
  }
}
