// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LiteralKindOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Represents a literal type (specific constant values or structured types).
pub struct LiteralKind<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LiteralKind<'a> {
  type Inner = LiteralKind<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> LiteralKind<'a> {
  pub const VT_LITERAL_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_LITERAL: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LiteralKind { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LiteralKindArgs
  ) -> flatbuffers::WIPOffset<LiteralKind<'bldr>> {
    let mut builder = LiteralKindBuilder::new(_fbb);
    if let Some(x) = args.literal { builder.add_literal(x); }
    builder.add_literal_type(args.literal_type);
    builder.finish()
  }


  #[inline]
  pub fn literal_type(&self) -> LiteralType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LiteralType>(LiteralKind::VT_LITERAL_TYPE, Some(LiteralType::NONE)).unwrap()}
  }
  #[inline]
  pub fn literal(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(LiteralKind::VT_LITERAL, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_string(&self) -> Option<StringValue<'a>> {
    if self.literal_type() == LiteralType::String {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StringValue::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_int_64(&self) -> Option<Int64Value<'a>> {
    if self.literal_type() == LiteralType::Int64 {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Int64Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_uint_64(&self) -> Option<UInt64Value<'a>> {
    if self.literal_type() == LiteralType::UInt64 {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { UInt64Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_float_64(&self) -> Option<Float64Value<'a>> {
    if self.literal_type() == LiteralType::Float64 {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Float64Value::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_decimal(&self) -> Option<Decimal<'a>> {
    if self.literal_type() == LiteralType::Decimal {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Decimal::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_duration(&self) -> Option<Duration<'a>> {
    if self.literal_type() == LiteralType::Duration {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { Duration::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_bool(&self) -> Option<BoolValue<'a>> {
    if self.literal_type() == LiteralType::Bool {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { BoolValue::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_array(&self) -> Option<LiteralArray<'a>> {
    if self.literal_type() == LiteralType::Array {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { LiteralArray::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_object(&self) -> Option<LiteralObject<'a>> {
    if self.literal_type() == LiteralType::Object {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { LiteralObject::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn literal_as_discriminated_object(&self) -> Option<LiteralDiscriminatedObject<'a>> {
    if self.literal_type() == LiteralType::DiscriminatedObject {
      self.literal().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { LiteralDiscriminatedObject::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for LiteralKind<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<LiteralType, _>("literal_type", Self::VT_LITERAL_TYPE, "literal", Self::VT_LITERAL, false, |key, v, pos| {
        match key {
          LiteralType::String => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StringValue>>("LiteralType::String", pos),
          LiteralType::Int64 => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Int64Value>>("LiteralType::Int64", pos),
          LiteralType::UInt64 => v.verify_union_variant::<flatbuffers::ForwardsUOffset<UInt64Value>>("LiteralType::UInt64", pos),
          LiteralType::Float64 => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Float64Value>>("LiteralType::Float64", pos),
          LiteralType::Decimal => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Decimal>>("LiteralType::Decimal", pos),
          LiteralType::Duration => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Duration>>("LiteralType::Duration", pos),
          LiteralType::Bool => v.verify_union_variant::<flatbuffers::ForwardsUOffset<BoolValue>>("LiteralType::Bool", pos),
          LiteralType::Array => v.verify_union_variant::<flatbuffers::ForwardsUOffset<LiteralArray>>("LiteralType::Array", pos),
          LiteralType::Object => v.verify_union_variant::<flatbuffers::ForwardsUOffset<LiteralObject>>("LiteralType::Object", pos),
          LiteralType::DiscriminatedObject => v.verify_union_variant::<flatbuffers::ForwardsUOffset<LiteralDiscriminatedObject>>("LiteralType::DiscriminatedObject", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct LiteralKindArgs {
    pub literal_type: LiteralType,
    pub literal: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for LiteralKindArgs {
  #[inline]
  fn default() -> Self {
    LiteralKindArgs {
      literal_type: LiteralType::NONE,
      literal: None,
    }
  }
}

pub struct LiteralKindBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LiteralKindBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_literal_type(&mut self, literal_type: LiteralType) {
    self.fbb_.push_slot::<LiteralType>(LiteralKind::VT_LITERAL_TYPE, literal_type, LiteralType::NONE);
  }
  #[inline]
  pub fn add_literal(&mut self, literal: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LiteralKind::VT_LITERAL, literal);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LiteralKindBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LiteralKindBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LiteralKind<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LiteralKind<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LiteralKind");
      ds.field("literal_type", &self.literal_type());
      match self.literal_type() {
        LiteralType::String => {
          if let Some(x) = self.literal_as_string() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Int64 => {
          if let Some(x) = self.literal_as_int_64() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::UInt64 => {
          if let Some(x) = self.literal_as_uint_64() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Float64 => {
          if let Some(x) = self.literal_as_float_64() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Decimal => {
          if let Some(x) = self.literal_as_decimal() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Duration => {
          if let Some(x) = self.literal_as_duration() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Bool => {
          if let Some(x) = self.literal_as_bool() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Array => {
          if let Some(x) = self.literal_as_array() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::Object => {
          if let Some(x) = self.literal_as_object() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        LiteralType::DiscriminatedObject => {
          if let Some(x) = self.literal_as_discriminated_object() {
            ds.field("literal", &x)
          } else {
            ds.field("literal", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("literal", &x)
        },
      };
      ds.finish()
  }
}
