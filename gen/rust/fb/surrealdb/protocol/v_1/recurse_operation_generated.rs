// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RecurseOperationOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RecurseOperation<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecurseOperation<'a> {
  type Inner = RecurseOperation<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RecurseOperation<'a> {
  pub const VT_OPERATION_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_OPERATION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RecurseOperation { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RecurseOperationArgs
  ) -> flatbuffers::WIPOffset<RecurseOperation<'bldr>> {
    let mut builder = RecurseOperationBuilder::new(_fbb);
    if let Some(x) = args.operation { builder.add_operation(x); }
    builder.add_operation_type(args.operation_type);
    builder.finish()
  }


  #[inline]
  pub fn operation_type(&self) -> RecurseOperationType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RecurseOperationType>(RecurseOperation::VT_OPERATION_TYPE, Some(RecurseOperationType::NONE)).unwrap()}
  }
  #[inline]
  pub fn operation(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(RecurseOperation::VT_OPERATION, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn operation_as_path(&self) -> Option<RecursePath<'a>> {
    if self.operation_type() == RecurseOperationType::Path {
      self.operation().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RecursePath::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn operation_as_collect(&self) -> Option<RecurseCollect<'a>> {
    if self.operation_type() == RecurseOperationType::Collect {
      self.operation().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RecurseCollect::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn operation_as_shortest(&self) -> Option<RecurseShortest<'a>> {
    if self.operation_type() == RecurseOperationType::Shortest {
      self.operation().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RecurseShortest::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for RecurseOperation<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<RecurseOperationType, _>("operation_type", Self::VT_OPERATION_TYPE, "operation", Self::VT_OPERATION, false, |key, v, pos| {
        match key {
          RecurseOperationType::Path => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RecursePath>>("RecurseOperationType::Path", pos),
          RecurseOperationType::Collect => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RecurseCollect>>("RecurseOperationType::Collect", pos),
          RecurseOperationType::Shortest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RecurseShortest>>("RecurseOperationType::Shortest", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct RecurseOperationArgs {
    pub operation_type: RecurseOperationType,
    pub operation: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for RecurseOperationArgs {
  #[inline]
  fn default() -> Self {
    RecurseOperationArgs {
      operation_type: RecurseOperationType::NONE,
      operation: None,
    }
  }
}

pub struct RecurseOperationBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RecurseOperationBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_operation_type(&mut self, operation_type: RecurseOperationType) {
    self.fbb_.push_slot::<RecurseOperationType>(RecurseOperation::VT_OPERATION_TYPE, operation_type, RecurseOperationType::NONE);
  }
  #[inline]
  pub fn add_operation(&mut self, operation: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecurseOperation::VT_OPERATION, operation);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RecurseOperationBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RecurseOperationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecurseOperation<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RecurseOperation<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RecurseOperation");
      ds.field("operation_type", &self.operation_type());
      match self.operation_type() {
        RecurseOperationType::Path => {
          if let Some(x) = self.operation_as_path() {
            ds.field("operation", &x)
          } else {
            ds.field("operation", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        RecurseOperationType::Collect => {
          if let Some(x) = self.operation_as_collect() {
            ds.field("operation", &x)
          } else {
            ds.field("operation", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        RecurseOperationType::Shortest => {
          if let Some(x) = self.operation_as_shortest() {
            ds.field("operation", &x)
          } else {
            ds.field("operation", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("operation", &x)
        },
      };
      ds.finish()
  }
}
